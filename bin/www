#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("daily-learn-chatapp:server");
var http = require("http");
const SocketIOFile = require("socket.io-file");
var fs = require("fs");
var path = require('path')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require("socket.io")(server, {
  origin: ["https://dev.dailylearn.in"],
  handlePreflightRequest: (req, res) => {
    res.writeHead(200, {
      "Access-Control-Allow-Origin": "https://dev.dailylearn.in",
      "Access-Control-Allow-Methods": "GET,POST",
      "Access-Control-Allow-Credentials": true,
    });
    res.end();
  },
});

io.on("connection", (socket) => {
  console.log("User Online");

  socket.on("codeboard-message", (msg) => {
    console.log("message received: " + msg);
    socket.broadcast.emit("codeboard-message-broadcasted", msg);
  });

      // File Upload

      var responseObj = {
        data: {},
        err: {}
      }

      var uploader = new SocketIOFile(socket, {
        // uploadDir: {			// multiple directories
        // 	music: 'data/music',
        // 	document: 'data/document'
        // },
        uploadDir: path.join(__dirname, '../') + '/uploads', // simple directory
        maxFileSize: 4194304, // 4 MB. default is undefined(no limit)
        chunkSize: 10240, // default is 10240(1KB)
        transmissionDelay: 0, // delay of each transmission, higher value saves more cpu resources, lower upload speed. default is 0(no delay)
        overwrite: true, // overwrite file if exists, default is true.
      });
  
      uploader.on("start", (fileInfo) => {
        console.log("Start uploading");
        console.log(fileInfo);
      });
      uploader.on("stream", (fileInfo) => {
        console.log(`${fileInfo.wrote} / ${fileInfo.size} byte(s)`);
      });
      uploader.on("complete", (fileInfo) => {
        console.log("Upload Complete.");
        console.log(fileInfo);
        
        var uploadPath = path.join(__dirname, '../') + '/uploads'
        var filepath = fileInfo.uploadDir
        var fileName = fileInfo.name
      
        fs.readFile(filepath, function (error, filedata) {
          console.log('download link API' , `${uploadPath}?name=${fileName}`)
          if (error) throw error;
          // else socket.emit("codeboard-message-broadcasted", `<a href=http://localhost:3000/files/download?name=${fileName}>${fileName}</a>`);
          else {
            var downloadAPI = `https://daily-learn-chatapp.herokuapp.com/files/download?name=${fileName}`
            responseObj['data'] = {...fileInfo}
            responseObj['data']['downloadAPI'] = downloadAPI
          }
          socket.emit("files-emit", JSON.stringify(responseObj));
        });
      });
  
      uploader.on("error", (err) => {
        console.log("Error!", err);
        responseObj['err'] = err
        socket.emit("files-emit", JSON.stringify(responseObj));
      });

      uploader.on("abort", (fileInfo) => {
        console.log("Aborted: ", fileInfo);
        responseObj['err'] = fileInfo
        socket.emit("files-emit", JSON.stringify(responseObj));
      });
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
